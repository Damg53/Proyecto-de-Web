// components/PanelInformacion.jsx
// Importa React para crear el componente
import React from 'react';

// Funci√≥n que genera la teor√≠a espec√≠fica seg√∫n la estructura y el paso actual
const generarTeoriaPaso = (estadoVisualizacion, estructuraSeleccionada) => {
  // Debug para ver qu√© datos est√°n llegando
  console.log('Debug - EstadoVisualizacion:', estadoVisualizacion);
  console.log('Debug - EstructuraSeleccionada:', estructuraSeleccionada);

  if (!estadoVisualizacion || !estructuraSeleccionada) {
    return null;
  }

  const { pasoActual, totalPasos, lineaActual, estructuras } = estadoVisualizacion;

  // Debug para ver las estructuras disponibles
  console.log('Debug - Estructuras:', estructuras);

  // TEOR√çA PARA VECTORES (ARRAYS)
  if (estructuraSeleccionada === 'Vector') {
    // Buscar vector con diferentes posibles tipos
    let vector = estructuras?.find(e => e.tipo === 'vector' || e.tipo === 'array' || e.tipo === 'Vector');
    
    // Si no encontramos por tipo, buscar por estructura que contenga elementos array-like
    if (!vector && estructuras?.length > 0) {
      vector = estructuras.find(e => e.elementos || e.datos || Array.isArray(e.valor));
    }

    // Mostrar teor√≠a gen√©rica si no encontramos estructura espec√≠fica
    const nombre = vector?.nombre || 'arr';
    const tama√±o = vector?.tama√±o || vector?.elementos?.length || 5;
    const elementos = vector?.elementos || vector?.datos || [];
    
    const teorias = [
      {
        titulo: "üîß Declaraci√≥n de Vector",
        teoria: `Se est√° declarando un vector llamado "${nombre}" con capacidad para ${tama√±o} elementos. En memoria, esto reserva ${tama√±o} espacios contiguos de memoria, cada uno capaz de almacenar un entero.`,
        complejidad: "O(1) - Tiempo constante para la declaraci√≥n",
        detalle: `Los vectores son estructuras de datos fundamentales que almacenan elementos del mismo tipo en posiciones consecutivas de memoria. Esto permite acceso directo por √≠ndice.`
      },
      {
        titulo: "üìù Asignaci√≥n por √çndice",
        teoria: `Se est√° asignando un valor en la posici√≥n espec√≠fica del vector "${nombre}". El acceso directo por √≠ndice es la operaci√≥n m√°s eficiente en vectores.`,
        complejidad: "O(1) - Acceso y asignaci√≥n en tiempo constante",
        detalle: `La f√≥rmula para calcular la direcci√≥n de memoria es: direcci√≥n_base + (√≠ndice * tama√±o_elemento). Esta es la raz√≥n de la eficiencia O(1).`
      },
      {
        titulo: "üîç Operaci√≥n de Acceso",
        teoria: `Se est√° accediendo al elemento en la posici√≥n indicada del vector "${nombre}". Los vectores permiten acceso aleatorio instant√°neo a cualquier elemento.`,
        complejidad: "O(1) - Acceso directo por √≠ndice",
        detalle: `A diferencia de las listas enlazadas, no necesitamos recorrer elementos previos para llegar al deseado.`
      }
    ];

    // Determinar qu√© teor√≠a mostrar
    if (pasoActual === 1) {
      return teorias[0];
    } else if (pasoActual === 2 || elementos.length > 0) {
      return {
        ...teorias[1],
        teoria: `${teorias[1].teoria} ${vector ? `Actualmente "${nombre}" tiene elementos asignados.` : ''}`
      };
    } else {
      return teorias[2];
    }
  }

  // TEOR√çA PARA MATRICES (ARRAYS 2D)
  if (estructuraSeleccionada === 'Matriz') {
    let matriz = estructuras?.find(e => e.tipo === 'matriz' || e.tipo === 'matrix' || e.tipo === 'Matriz');
    
    if (!matriz && estructuras?.length > 0) {
      matriz = estructuras.find(e => e.filas || e.columnas || (e.elementos && Array.isArray(e.elementos[0])));
    }

    const nombre = matriz?.nombre || 'mat';
    const filas = matriz?.filas || 3;
    const columnas = matriz?.columnas || 3;
    const elementos = matriz?.elementos || [];
    const elementosAsignados = Array.isArray(elementos) ? elementos.filter(e => e.valor !== undefined).length : 0;
    
    const teorias = [
      {
        titulo: "üèóÔ∏è Declaraci√≥n de Matriz",
        teoria: `Se est√° declarando una matriz "${nombre}" de ${filas}√ó${columnas} (${filas} filas por ${columnas} columnas). Esto reserva ${filas * columnas} espacios contiguos en memoria.`,
        complejidad: "O(1) - Declaraci√≥n en tiempo constante",
        detalle: `Las matrices son vectores bidimensionales. En memoria, se almacenan como un vector lineal donde mat[i][j] se mapea a la posici√≥n (i * columnas + j).`
      },
      {
        titulo: "üìç Asignaci√≥n Bidimensional",
        teoria: `Se est√° asignando un valor en la posici√≥n [fila][columna] de la matriz "${nombre}". El sistema calcula autom√°ticamente la posici√≥n real en memoria.`,
        complejidad: "O(1) - Acceso directo bidimensional",
        detalle: `Para matriz[i][j], la direcci√≥n real es: base + (i * n√∫mero_columnas + j) * tama√±o_elemento. ${matriz ? `Actualmente hay ${elementosAsignados} elementos asignados.` : ''}`
      },
      {
        titulo: "üéØ Navegaci√≥n Matricial",
        teoria: `Se est√° accediendo a un elemento espec√≠fico en la matriz "${nombre}". Las matrices permiten navegaci√≥n eficiente en dos dimensiones.`,
        complejidad: "O(1) - Acceso aleatorio bidimensional",
        detalle: `Las matrices son ideales para representar tablas, im√°genes, o cualquier estructura de datos bidimensional donde necesites acceso directo por coordenadas.`
      }
    ];

    if (pasoActual === 1) {
      return teorias[0];
    } else if (pasoActual === 2 || elementosAsignados > 0) {
      return teorias[1];
    } else {
      return teorias[2];
    }
  }

  // TEOR√çA PARA LISTAS ENLAZADAS
  if (estructuraSeleccionada === 'Lista') {
    let lista = estructuras?.find(e => 
      e.tipo === 'lista' || 
      e.tipo === 'ListaDoble' || 
      e.tipo === 'LinkedList' ||
      e.tipo === 'DoublyLinkedList'
    );
    
    if (!lista && estructuras?.length > 0) {
      lista = estructuras.find(e => e.nodos || e.cabeza || e.head || e.primer || e.ultimo);
    }

    const nombre = lista?.nombre || 'miLista';
    const tama√±o = lista?.tama√±o || lista?.nodos?.length || 0;
    const nodos = lista?.nodos || [];
    const tipoLista = lista?.tipo?.includes('Doble') || lista?.dobleEnlace ? 'doblemente enlazada' : 'simplemente enlazada';
    
    const teorias = [
      {
        titulo: "üîó Declaraci√≥n de Lista Enlazada",
        teoria: `Se est√° declarando una lista ${tipoLista} llamada "${nombre}". A diferencia de los vectores, las listas no requieren reservar memoria contigua inicialmente.`,
        complejidad: "O(1) - Declaraci√≥n en tiempo constante",
        detalle: `Las listas enlazadas almacenan elementos (nodos) en ubicaciones arbitrarias de memoria, conect√°ndolos mediante punteros. Esto permite crecimiento din√°mico sin desperdicio de memoria.`
      },
      {
        titulo: "‚ûï Inserci√≥n de Nodo",
        teoria: `Se est√° insertando un nodo en la lista "${nombre}". ${tipoLista === 'doblemente enlazada' ? 'En listas dobles, cada nodo tiene punteros al anterior y al siguiente.' : 'En listas simples, cada nodo apunta solo al siguiente.'}`,
        complejidad: tama√±o <= 1 ? "O(1) - Inserci√≥n al inicio" : "O(n) - Inserci√≥n en posici√≥n espec√≠fica",
        detalle: `${tipoLista === 'doblemente enlazada' ? 'Las listas dobles permiten navegaci√≥n bidireccional pero requieren m√°s memoria (2 punteros por nodo).' : 'Las listas simples usan menos memoria pero solo permiten navegaci√≥n hacia adelante.'} Actualmente hay ${tama√±o} elemento${tama√±o !== 1 ? 's' : ''}.`
      },
      {
        titulo: "üóëÔ∏è Eliminaci√≥n de Nodo",
        teoria: `Se est√° eliminando un nodo de la lista "${nombre}". La eliminaci√≥n requiere actualizar los punteros de los nodos adyacentes para mantener la conectividad.`,
        complejidad: pasoActual <= 2 ? "O(1) - Eliminaci√≥n al inicio" : "O(n) - Eliminaci√≥n en posici√≥n espec√≠fica",
        detalle: `${tipoLista === 'doblemente enlazada' ? 'En listas dobles, se actualizan tanto el puntero "siguiente" del nodo anterior como el "anterior" del nodo posterior.' : 'En listas simples, se debe recorrer hasta el nodo anterior para actualizar su puntero.'} Lista actual: ${tama√±o} elemento${tama√±o !== 1 ? 's' : ''}.`
      },
      {
        titulo: "üîç B√∫squeda en Lista",
        teoria: `Se est√° buscando un elemento en la lista "${nombre}". Las listas requieren recorrido secuencial desde el inicio hasta encontrar el elemento deseado.`,
        complejidad: "O(n) - B√∫squeda secuencial",
        detalle: `A diferencia de los vectores, las listas no permiten acceso directo por √≠ndice. Debemos seguir los punteros nodo por nodo hasta encontrar el elemento buscado.`
      }
    ];

    // Determinar teor√≠a basada en la operaci√≥n detectada
    if (pasoActual === 1 || tama√±o === 0) {
      return teorias[0];
    } else if (pasoActual <= 3 && tama√±o > 0) {
      return teorias[1];
    } else if (tama√±o > 0) {
      // Intentar detectar si es eliminaci√≥n o b√∫squeda basado en el contexto
      return teorias[2]; // Por defecto eliminaci√≥n
    } else {
      return teorias[3];
    }
  }

  // TEOR√çA PARA √ÅRBOLES BINARIOS
  if (estructuraSeleccionada === 'Arboles') {
    let arbol = estructuras?.find(e => 
      e.tipo === 'arbol' || 
      e.tipo === 'ArbolBinario' || 
      e.tipo === 'BinaryTree' ||
      e.tipo === 'BST'
    );
    
    if (!arbol && estructuras?.length > 0) {
      arbol = estructuras.find(e => e.raiz || e.root || e.nodos);
    }

    const nombre = arbol?.nombre || 'BOF';
    const nodos = arbol?.nodos || [];
    const cantidadNodos = nodos.length;
    const raiz = arbol?.raiz || (nodos.length > 0 ? nodos[0] : null);
    const altura = arbol?.altura || Math.floor(Math.log2(cantidadNodos + 1));
    
    const teorias = [
      {
        titulo: "üå≥ Declaraci√≥n de √Årbol Binario",
        teoria: `Se est√° declarando un √°rbol binario llamado "${nombre}". Un √°rbol binario es una estructura jer√°rquica donde cada nodo puede tener m√°ximo 2 hijos: izquierdo y derecho.`,
        complejidad: "O(1) - Declaraci√≥n en tiempo constante",
        detalle: `Los √°rboles binarios organizan datos de forma jer√°rquica, permitiendo operaciones eficientes de b√∫squeda, inserci√≥n y eliminaci√≥n cuando est√°n balanceados.`
      },
      {
        titulo: "üå± Inserci√≥n en √Årbol",
        teoria: `Se est√° insertando un nodo con valor en el √°rbol "${nombre}". En un √°rbol binario de b√∫squeda, los valores menores van a la izquierda y los mayores a la derecha.`,
        complejidad: cantidadNodos <= 4 ? "O(log n) - Inserci√≥n eficiente en √°rbol balanceado" : "O(n) - Peor caso en √°rbol desbalanceado",
        detalle: `La inserci√≥n mantiene la propiedad de BST: para cada nodo, todos los valores en el sub√°rbol izquierdo son menores, y todos en el derecho son mayores. Nodos actuales: ${cantidadNodos}, altura aproximada: ${altura}.`
      },
      {
        titulo: "üîç B√∫squeda en √Årbol",
        teoria: `Se est√° buscando un valor en el √°rbol "${nombre}". La b√∫squeda aprovecha la propiedad de ordenamiento para descartar la mitad del √°rbol en cada comparaci√≥n.`,
        complejidad: "O(log n) - B√∫squeda eficiente en √°rbol balanceado",
        detalle: `La b√∫squeda binaria en √°rboles es mucho m√°s eficiente que en listas. En cada nodo, comparamos el valor buscado y decidimos ir a la izquierda (menor) o derecha (mayor).`
      },
      {
        titulo: "üö∂ Recorrido de √Årbol",
        teoria: `Se est√° realizando un recorrido del √°rbol "${nombre}". Los recorridos sistem√°ticos permiten visitar todos los nodos en un orden espec√≠fico.`,
        complejidad: "O(n) - Se debe visitar cada nodo exactamente una vez",
        detalle: `Existen tres recorridos principales: Inorden (izq-ra√≠z-der) da elementos ordenados en BST, Preorden (ra√≠z-izq-der) √∫til para copiar, Postorden (izq-der-ra√≠z) para eliminar √°rbol.`
      },
      {
        titulo: "‚öñÔ∏è Balanceo del √Årbol",
        teoria: `Se est√° evaluando o manteniendo el balance del √°rbol "${nombre}". Un √°rbol balanceado mantiene operaciones eficientes O(log n).`,
        complejidad: "O(log n) - Operaciones en √°rbol bien balanceado",
        detalle: `Un √°rbol est√° balanceado cuando la diferencia de altura entre sub√°rboles izquierdo y derecho no excede 1. √Årboles desbalanceados se comportan como listas enlazadas (O(n)).`
      }
    ];

    // Determinar teor√≠a basada en el paso y estado del √°rbol
    if (pasoActual === 1 || cantidadNodos === 0) {
      return teorias[0];
    } else if (pasoActual <= 3 || (pasoActual <= cantidadNodos && cantidadNodos <= 8)) {
      return teorias[1];
    } else if (pasoActual > cantidadNodos || (cantidadNodos > 3 && pasoActual > cantidadNodos / 2)) {
      // Probablemente b√∫squeda o recorrido
      return cantidadNodos > 5 ? teorias[3] : teorias[2];
    } else {
      return teorias[4];
    }
  }

  // TEOR√çA PARA PILAS (STACKS)
  if (estructuraSeleccionada === 'Pila') {
    let pila = estructuras?.find(e => 
      e.tipo === 'pila' || 
      e.tipo === 'Pila' || 
      e.tipo === 'Stack'
    );
    
    if (!pila && estructuras?.length > 0) {
      pila = estructuras.find(e => e.elementos || e.tope || e.top);
    }

    const nombre = pila?.nombre || 'miPila';
    const tama√±o = pila?.tama√±o || pila?.elementos?.length || 0;
    const elementos = pila?.elementos || [];
    
    const teorias = [
      {
        titulo: "üìö Declaraci√≥n de Pila (Stack)",
        teoria: `Se est√° declarando una pila llamada "${nombre}". Las pilas siguen el principio LIFO (Last In, First Out): el √∫ltimo elemento en entrar es el primero en salir.`,
        complejidad: "O(1) - Declaraci√≥n en tiempo constante",
        detalle: `Las pilas son como una pila de platos: solo puedes agregar o quitar elementos desde la parte superior (tope). Son fundamentales en la gesti√≥n de memoria y llamadas a funciones.`
      },
      {
        titulo: "‚¨ÜÔ∏è Operaci√≥n Push",
        teoria: `Se est√° insertando un elemento en el tope de la pila "${nombre}". La operaci√≥n push agrega un nuevo elemento encima de todos los dem√°s.`,
        complejidad: "O(1) - Inserci√≥n en tiempo constante",
        detalle: `El push actualiza el puntero del tope y coloca el nuevo elemento en esa posici√≥n. Actualmente la pila tiene ${tama√±o} elemento${tama√±o !== 1 ? 's' : ''}.`
      },
      {
        titulo: "‚¨áÔ∏è Operaci√≥n Pop",
        teoria: `Se est√° extrayendo el elemento del tope de la pila "${nombre}". La operaci√≥n pop remueve y retorna el √∫ltimo elemento insertado.`,
        complejidad: "O(1) - Extracci√≥n en tiempo constante",
        detalle: `El pop devuelve el elemento del tope y actualiza el puntero. Si la pila est√° vac√≠a, genera un error de underflow. Elementos restantes: ${tama√±o}.`
      },
      {
        titulo: "üëÄ Operaci√≥n Peek/Top",
        teoria: `Se est√° consultando el elemento del tope de la pila "${nombre}" sin removerlo. Peek permite ver el pr√≥ximo elemento a extraer.`,
        complejidad: "O(1) - Consulta en tiempo constante",
        detalle: `Peek/Top es √∫til para verificar qu√© elemento se extraer√° sin modificar la pila. Es seguro usar cuando se necesita tomar decisiones basadas en el tope.`
      }
    ];

    if (pasoActual === 1 || tama√±o === 0) {
      return teorias[0];
    } else if (pasoActual <= 3) {
      return teorias[1]; // Push
    } else if (pasoActual <= 5) {
      return teorias[2]; // Pop
    } else {
      return teorias[3]; // Peek
    }
  }

  // TEOR√çA PARA COLAS (QUEUES)
  if (estructuraSeleccionada === 'Cola') {
    let cola = estructuras?.find(e => 
      e.tipo === 'cola' || 
      e.tipo === 'Cola' || 
      e.tipo === 'Queue'
    );
    
    if (!cola && estructuras?.length > 0) {
      cola = estructuras.find(e => e.elementos || e.frente || e.front || e.rear);
    }

    const nombre = cola?.nombre || 'miCola';
    const tama√±o = cola?.tama√±o || cola?.elementos?.length || 0;
    const elementos = cola?.elementos || [];
    
    const teorias = [
      {
        titulo: "üö∂‚Äç‚ôÄÔ∏è Declaraci√≥n de Cola (Queue)",
        teoria: `Se est√° declarando una cola llamada "${nombre}". Las colas siguen el principio FIFO (First In, First Out): el primer elemento en entrar es el primero en salir.`,
        complejidad: "O(1) - Declaraci√≥n en tiempo constante",
        detalle: `Las colas simulan filas de espera: los elementos se agregan por un extremo (rear) y se remueven por el otro (front). Son esenciales en sistemas de colas de procesos y algoritmos BFS.`
      },
      {
        titulo: "‚û°Ô∏è Operaci√≥n Enqueue",
        teoria: `Se est√° insertando un elemento al final de la cola "${nombre}". Enqueue agrega el elemento al rear (parte trasera) de la cola.`,
        complejidad: "O(1) - Inserci√≥n en tiempo constante",
        detalle: `El nuevo elemento se coloca despu√©s del √∫ltimo elemento existente. Mantiene el orden de llegada. Cola actual: ${tama√±o} elemento${tama√±o !== 1 ? 's' : ''}.`
      },
      {
        titulo: "‚¨ÖÔ∏è Operaci√≥n Dequeue",
        teoria: `Se est√° extrayendo el primer elemento de la cola "${nombre}". Dequeue remueve y retorna el elemento del front (parte delantera).`,
        complejidad: "O(1) - Extracci√≥n en tiempo constante",
        detalle: `Se remueve el elemento que m√°s tiempo lleva esperando. Si la cola est√° vac√≠a, genera un error de underflow. Elementos restantes: ${tama√±o}.`
      },
      {
        titulo: "üîç Operaci√≥n Front",
        teoria: `Se est√° consultando el primer elemento de la cola "${nombre}" sin removerlo. Front permite ver el pr√≥ximo elemento a procesar.`,
        complejidad: "O(1) - Consulta en tiempo constante",
        detalle: `Front es √∫til para verificar qu√© elemento se procesar√° a continuaci√≥n sin modificar la cola. Ideal para toma de decisiones en sistemas de colas.`
      }
    ];

    if (pasoActual === 1 || tama√±o === 0) {
      return teorias[0];
    } else if (pasoActual <= 3) {
      return teorias[1]; // Enqueue
    } else if (pasoActual <= 5) {
      return teorias[2]; // Dequeue
    } else {
      return teorias[3]; // Front
    }
  }

  // TEOR√çA PARA GRAFOS
  if (estructuraSeleccionada === 'Grafos') {
    let grafo = estructuras?.find(e => 
      e.tipo === 'grafo' || 
      e.tipo === 'Grafo' || 
      e.tipo === 'Graph'
    );
    
    if (!grafo && estructuras?.length > 0) {
      grafo = estructuras.find(e => e.nodos || e.vertices || e.aristas || e.edges);
    }

    const nombre = grafo?.nombre || 'miGrafo';
    const nodos = grafo?.nodos || [];
    const aristas = grafo?.aristas || [];
    const cantidadNodos = nodos.length;
    const cantidadAristas = aristas.length;
    const esDirigido = grafo?.dirigido || false;
    
    const teorias = [
      {
        titulo: "üï∏Ô∏è Declaraci√≥n de Grafo",
        teoria: `Se est√° declarando un grafo ${esDirigido ? 'dirigido' : 'no dirigido'} llamado "${nombre}". Los grafos modelan relaciones complejas entre entidades.`,
        complejidad: "O(1) - Declaraci√≥n en tiempo constante",
        detalle: `Los grafos consisten en nodos (v√©rtices) conectados por aristas (edges). ${esDirigido ? 'En grafos dirigidos, las aristas tienen direcci√≥n.' : 'En grafos no dirigidos, las conexiones son bidireccionales.'}`
      },
      {
        titulo: "üîµ Adici√≥n de Nodo",
        teoria: `Se est√° agregando un nodo al grafo "${nombre}". Los nodos representan entidades o estados en el problema modelado.`,
        complejidad: "O(1) - Inserci√≥n de nodo en tiempo constante",
        detalle: `Cada nodo puede tener un identificador √∫nico y propiedades asociadas. Actualmente el grafo tiene ${cantidadNodos} nodo${cantidadNodos !== 1 ? 's' : ''}.`
      },
      {
        titulo: "üîó Adici√≥n de Arista",
        teoria: `Se est√° agregando una arista entre dos nodos en el grafo "${nombre}". Las aristas representan relaciones o conexiones.`,
        complejidad: "O(1) - Inserci√≥n de arista en tiempo constante",
        detalle: `${esDirigido ? 'En grafos dirigidos, la arista va desde el nodo origen hasta el destino.' : 'En grafos no dirigidos, la arista conecta ambos nodos mutuamente.'} Total de aristas: ${cantidadAristas}.`
      },
      {
        titulo: "üîç B√∫squeda BFS",
        teoria: `Se est√° ejecutando una b√∫squeda en anchura (BFS) en el grafo "${nombre}". BFS explora nivel por nivel desde el nodo inicial.`,
        complejidad: "O(V + E) - Donde V son v√©rtices y E son aristas",
        detalle: `BFS usa una cola para mantener el orden de exploraci√≥n. Garantiza encontrar el camino m√°s corto en grafos no ponderados. Es ideal para problemas de camino m√≠nimo.`
      },
      {
        titulo: "üï≥Ô∏è B√∫squeda DFS",
        teoria: `Se est√° ejecutando una b√∫squeda en profundidad (DFS) en el grafo "${nombre}". DFS explora tan profundo como sea posible antes de retroceder.`,
        complejidad: "O(V + E) - Donde V son v√©rtices y E son aristas",
        detalle: `DFS usa una pila (o recursi√≥n) para la exploraci√≥n. Es √∫til para detectar ciclos, componentes conexas, y ordenamiento topol√≥gico.`
      },
      {
        titulo: "üõ§Ô∏è Algoritmo de Dijkstra",
        teoria: `Se est√° ejecutando el algoritmo de Dijkstra en el grafo "${nombre}" para encontrar el camino m√°s corto entre dos nodos.`,
        complejidad: "O((V + E) log V) - Con cola de prioridad",
        detalle: `Dijkstra encuentra el camino de menor costo en grafos con pesos positivos. Mantiene un conjunto de nodos visitados y actualiza las distancias m√≠nimas iterativamente.`
      }
    ];

    // Determinar teor√≠a basada en la operaci√≥n y estado
    if (pasoActual === 1 || (cantidadNodos === 0 && cantidadAristas === 0)) {
      return teorias[0];
    } else if (pasoActual <= 5 && cantidadAristas === 0) {
      return teorias[1]; // Agregando nodos
    } else if (pasoActual <= 10 && cantidadAristas < cantidadNodos) {
      return teorias[2]; // Agregando aristas
    } else if (pasoActual <= 12) {
      return teorias[3]; // BFS
    } else if (pasoActual <= 14) {
      return teorias[4]; // DFS
    } else {
      return teorias[5]; // Dijkstra
    }
  }

  // Si llegamos aqu√≠, mostrar teor√≠a gen√©rica
  return null;
};

// Componente funcional que muestra informaci√≥n contextual sobre el paso actual
// Recibe como props:
// - descripcion: texto descriptivo b√°sico del paso
// - estadoVisualizacion: objeto con informaci√≥n completa del estado actual
// - estructuraSeleccionada: tipo de estructura que se est√° visualizando
const PanelInformacion = ({ descripcion, estadoVisualizacion, estructuraSeleccionada }) => {
  
  // Generar teor√≠a espec√≠fica para el paso actual
  const teoriaActual = generarTeoriaPaso(estadoVisualizacion, estructuraSeleccionada);

  return (
    // Contenedor principal del panel de informaci√≥n
    <div className="info-panel">
      
      {/* Secci√≥n de informaci√≥n b√°sica del paso */}
      <div id="stepInfo" className="step-info">
        <h5>Informaci√≥n del paso:</h5>
        <p id="stepDescription">{descripcion}</p>
      </div>

      {/* Secci√≥n de teor√≠a avanzada si est√° disponible */}
      {teoriaActual && (
        <div className="teoria-panel mt-3 p-3 border-left border-primary bg-light">
          <h6 className="text-primary">
            <i className="fas fa-graduation-cap me-2"></i>
            {teoriaActual.titulo}
          </h6>
          
          <p className="mb-2">
            <strong>Teor√≠a:</strong> {teoriaActual.teoria}
          </p>
          
          <p className="mb-2 text-success">
            <strong>Complejidad:</strong> {teoriaActual.complejidad}
          </p>
          
          <p className="mb-0 text-muted">
            <strong>Detalle t√©cnico:</strong> {teoriaActual.detalle}
          </p>
        </div>
      )}

      {/* Informaci√≥n de progreso si hay ejecuci√≥n paso a paso */}
      {estadoVisualizacion && estadoVisualizacion.pasoActual && (
        <div className="progreso-panel mt-2 p-2 bg-info text-white rounded">
         
            üìä Progreso: {estadoVisualizacion.pasoActual}/{estadoVisualizacion.totalPasos}
            {estadoVisualizacion.lineaActual && (
              <span> | L√≠nea: {estadoVisualizacion.lineaActual}</span>
            )}
         
        </div>
      )}
    </div>
  );
};

// Exporta el componente como default para poder importarlo en otros archivos
export default PanelInformacion;
